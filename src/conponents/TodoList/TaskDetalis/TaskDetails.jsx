import { useState, useEffect } from "react";
import "./TaskDetails.css";

export default function TaskDetails({ selectedTask, onClose, updateTask }) {
    if (!selectedTask) return null;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–¥–∞—á–∏
    const [subtasks, setSubtasks] = useState(selectedTask.subtasks || []);
    const [subtaskText, setSubtaskText] = useState("");

    useEffect(() => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á
        updateTask(selectedTask.id, { subtasks });
    }, [subtasks]);

    const addSubtask = () => {
        if (subtaskText.trim() !== "") {
            const newSubtask = { id: Date.now(), text: subtaskText, completed: false };
            setSubtasks([...subtasks, newSubtask]);
            setSubtaskText("");
        }
    };

    const toggleSubtask = (id) => {
        setSubtasks(subtasks.map(subtask =>
            subtask.id === id ? { ...subtask, completed: !subtask.completed } : subtask
        ));
    };

    const deleteSubtask = (id) => {
        setSubtasks(subtasks.filter(subtask => subtask.id !== id));
    };

    return (
        <div className="task-details">
            <h3>üìå –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏</h3>
            <p><strong>–ó–∞–¥–∞—á–∞:</strong> {selectedTask.text}</p>
            {selectedTask.dueDate && <p><strong>üìÖ –î–∞—Ç–∞:</strong> {selectedTask.dueDate}</p>}
            {selectedTask.description && <p><strong>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</strong> {selectedTask.description}</p>}
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {selectedTask.completed ? "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" : "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"}</p>

            {/* üîπ –í–≤–æ–¥ –Ω–æ–≤–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏ */}
            <div className="subtask-input">
                <input
                    type="text"
                    value={subtaskText}
                    onChange={(e) => setSubtaskText(e.target.value)}
                    placeholder="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É..."
                />
                <button onClick={addSubtask}>‚ûï</button>
            </div>

            {/* üîπ –°–ø–∏—Å–æ–∫ –ø–æ–¥–∑–∞–¥–∞—á */}
            {subtasks.length > 0 && (
                <ul className="subtask-list">
                    {subtasks.map(subtask => (
                        <li key={subtask.id} className={`subtask-item ${subtask.completed ? "completed" : ""}`}>
                            <input
                                type="checkbox"
                                className="subtask-checkbox"
                                checked={subtask.completed}
                                onChange={() => toggleSubtask(subtask.id)}
                            />
                            <span>{subtask.text}</span>
                            <button onClick={() => deleteSubtask(subtask.id)}>üóë</button>
                        </li>
                    ))}
                </ul>
            )}

            <button className="close-btn" onClick={onClose}>‚ùå –ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
    );
}
